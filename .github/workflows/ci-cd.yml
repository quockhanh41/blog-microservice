name: Blog Microservices CI/CD

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-env.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set environment
        id: set-env
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/main" ] || [ "${{ github.ref }}" == "refs/heads/master" ]; then
            echo "environment=production" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
          else
            echo "environment=development" >> $GITHUB_OUTPUT
          fi

  test:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, post-service, feed-service, api-gateway]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.service }}/package-lock.json'

      - name: Install dependencies
        working-directory: ${{ matrix.service }}
        run: npm ci

      - name: Run tests
        working-directory: ${{ matrix.service }}
        run: npm test || echo "No tests found, continuing..."

  build-and-push:
    needs: [setup, test]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, post-service, feed-service, api-gateway, Frontend]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: yourregistry/${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=sha,format=short

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            ENV=${{ needs.setup.outputs.environment }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [setup, build-and-push]
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    environment: ${{ needs.setup.outputs.environment }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      - name: Set Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          kubeconfig: ${{ secrets.KUBE_CONFIG }}

      - name: Deploy to Kubernetes
        run: |
          # Replace image tags in deployment files
          for service in user-service post-service feed-service api-gateway Frontend; do
            sed -i "s|image:.*${service}.*|image: yourregistry/${service}:sha-$(git rev-parse --short HEAD)|g" k8s/${{ needs.setup.outputs.environment }}/${service}-deployment.yaml
            kubectl apply -f k8s/${{ needs.setup.outputs.environment }}/${service}-deployment.yaml
          done
          
          # Apply other Kubernetes resources
          kubectl apply -f k8s/${{ needs.setup.outputs.environment }}/configmap.yaml
          kubectl apply -f k8s/${{ needs.setup.outputs.environment }}/secrets.yaml
          kubectl apply -f k8s/${{ needs.setup.outputs.environment }}/services.yaml
          kubectl apply -f k8s/${{ needs.setup.outputs.environment }}/ingress.yaml

      - name: Verify deployment
        run: |
          for service in user-service post-service feed-service api-gateway frontend; do
            kubectl rollout status deployment/${service} -n blog-microservices
          done
