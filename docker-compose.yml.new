version: '3.8'

services:
  api-gateway:
    build: 
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: blog-api-gateway
    ports:
      - "8080:8080"
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    depends_on:
      - user-service
      - post-service
      - feed-service
    environment:
      - NODE_ENV=development
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  user-service:
    build: 
      context: ./user-service
      dockerfile: Dockerfile
    container_name: blog-user-service
    ports:
      - "3001:3001"
    volumes:
      - ./user-service:/app
      - /app/node_modules
    depends_on:
      postgres-user:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres-user:5432/user_service
      - KAFKA_BROKERS=kafka:9092
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=3001
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  post-service:
    build: 
      context: ./post-service
      dockerfile: Dockerfile
    container_name: blog-post-service
    ports:
      - "3002:3002"
    volumes:
      - ./post-service:/app
      - /app/node_modules
    depends_on:
      postgres-post:
        condition: service_healthy
      kafka:
        condition: service_healthy
      user-service:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://postgres:password@postgres-post:5432/post_service
      - USER_SERVICE_URL=http://user-service:3001
      - KAFKA_BROKERS=kafka:9092
      - PORT=3002
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  feed-service:
    build: 
      context: ./feed-service
      dockerfile: Dockerfile
    container_name: blog-feed-service
    ports:
      - "3003:3003"
    volumes:
      - ./feed-service:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      post-service:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - POST_SERVICE_URL=http://post-service:3002
      - PORT=3003
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres-user:
    image: postgres:15
    container_name: blog-postgres-user
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=user_service
    volumes:
      - pgdata-user:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - blog-network
    restart: unless-stopped

  postgres-post:
    image: postgres:15
    container_name: blog-postgres-post
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_PASSWORD=password
      - POSTGRES_USER=postgres
      - POSTGRES_DB=post_service
    volumes:
      - pgdata-post:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - blog-network
    restart: unless-stopped

  redis:
    image: redis:7
    container_name: blog-redis
    ports:
      - "6379:6379"
    volumes:
      - redisdata:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - blog-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: blog-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blog-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: blog-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blog-network
    restart: unless-stopped

volumes:
  pgdata-user:
  pgdata-post:
  redisdata:

networks:
  blog-network:
    driver: bridge
