name: Blog Microservices CI

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint:
    name: Lint Services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [user-service, post-service, feed-service, api-gateway, Frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.service }}/package.json'
      
      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
          if [ "${{ matrix.service }}" = "feed-service" ]; then
            npm install
          else
            npm ci
          fi
      
      - name: Run linting
        if: matrix.service == 'Frontend'
        run: |
          cd ${{ matrix.service }}
          npm run lint
          
      - name: TypeScript check
        if: matrix.service != 'api-gateway'
        run: |
          cd ${{ matrix.service }}
          npx tsc --noEmit

  build:
    name: Build Services
    runs-on: ubuntu-latest
    needs: lint
    strategy:
      matrix:
        service: [user-service, post-service, feed-service, api-gateway, Frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: '${{ matrix.service }}/package.json'
      
      - name: Install dependencies
        run: |
          cd ${{ matrix.service }}
            npm install

      
      - name: Generate Prisma client
        if: matrix.service == 'user-service' || matrix.service == 'post-service'
        run: |
          cd ${{ matrix.service }}
          npm run prisma:generate
      
      - name: Build
        run: |
          cd ${{ matrix.service }}
          npm run build
      
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.service }}-build
          path: |
            ${{ matrix.service }}/dist
            ${{ matrix.service }}/.next
          retention-days: 1

  test:
    name: Test Services
    runs-on: ubuntu-latest
    needs: build
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_HOST_AUTH_METHOD: trust
          POSTGRES_DB: user_service_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      
      redis:
        image: redis:7
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
      
      - name: Install dependencies for user-service
        run: |
          cd user-service
          npm ci
      
      - name: Generate Prisma client for user-service
        run: |
          cd user-service
          npm run prisma:generate
      
      - name: Run user-service tests
        env:
          DATABASE_URL: postgresql://postgres@localhost:5432/user_service_test
          JWT_SECRET: test-jwt-secret
        run: |
          cd user-service
          npm test

  docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test]
    if: github.event_name == 'push'
    strategy:
      matrix:
        service: [user-service, post-service, feed-service, api-gateway, Frontend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/blog-${{ matrix.service }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/blog-${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Start containers
        run: |
          docker-compose -f docker-compose.yml up -d
      
      - name: Wait for services
        run: |
          echo "Waiting for services to start..."
          sleep 60
      
      - name: Check service health
        run: |
          docker-compose ps
          curl -f http://localhost:8080/health || exit 1
      
      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          # Add integration test commands here
      
      - name: Collect logs on failure
        if: failure()
        run: |
          mkdir -p ./logs
          docker-compose logs > ./logs/docker-compose.log
      
      - name: Upload logs on failure
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: service-logs
          path: ./logs
          retention-days: 5
      
      - name: Stop containers
        if: always()
        run: |
          docker-compose down
