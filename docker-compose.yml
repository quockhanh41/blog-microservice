services:
  api-gateway:
    build: 
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: blog-api-gateway
    ports:
      - "8080:8080"
      - "8081:8081"
      - "9876:9876"
    volumes:
      - ./api-gateway:/app
      - /app/node_modules
    depends_on:
      - user-service
      - post-service
      - feed-service
      - consul
    environment:
      - NODE_ENV=development
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SERVICE_ADDRESS=api-gateway
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  user-service:
    build: 
      context: ./user-service
      dockerfile: Dockerfile
    ports:
      - "3001-3010:3001"
    volumes:
      - ./user-service:/app
      - /app/node_modules
    depends_on:
      postgres-user:
        condition: service_healthy
      kafka:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - DOCKER_ENV=true
      - DATABASE_URL=postgresql://postgres@postgres-user:5432/user_service
      - KAFKA_BROKERS=kafka:9092
      - JWT_SECRET=your-super-secret-jwt-key-change-in-production
      - PORT=3001
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SERVICE_ADDRESS=user-service
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s
  post-service:
    build: 
      context: ./post-service
      dockerfile: Dockerfile
    ports:
      - "3002-3020:3002"
    volumes:
      - ./post-service/src:/app/src
      - ./post-service/scripts:/app/scripts
      - ./post-service/prisma:/app/prisma
      - /app/node_modules
      - /app/dist
    depends_on:
      postgres-post:
        condition: service_healthy
      kafka:
        condition: service_healthy
      user-service:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - DOCKER_ENV=true
      - DATABASE_URL=postgresql://postgres@postgres-post:5432/post_service
      - USER_SERVICE_URL=http://user-service:3001
      - KAFKA_BROKERS=kafka:9092
      - PORT=3002
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SERVICE_ADDRESS=post-service
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3002/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  feed-service:
    build: 
      context: ./feed-service
      dockerfile: Dockerfile
    ports:
      - "3003-3030:3003"
    volumes:
      - ./feed-service:/app
      - /app/node_modules
    depends_on:
      redis:
        condition: service_healthy
      user-service:
        condition: service_healthy
      post-service:
        condition: service_healthy
      consul:
        condition: service_healthy
    environment:
      - NODE_ENV=development
      - REDIS_URL=redis://redis:6379
      - USER_SERVICE_URL=http://user-service:3001
      - POST_SERVICE_URL=http://post-service:3002
      - PORT=3003
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - SERVICE_ADDRESS=feed-service
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3003/health"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres-user:
    image: postgres:15
    container_name: blog-postgres-user
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_DB=user_service
      - POSTGRES_MULTIPLE_DATABASES=user_service,user_service_test
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - blog-network
    restart: unless-stopped

  postgres-post:
    image: postgres:15
    container_name: blog-postgres-post
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_HOST_AUTH_METHOD=trust
      - POSTGRES_USER=postgres
      - POSTGRES_DB=post_service
      - POSTGRES_MULTIPLE_DATABASES=post_service,post_service_test
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - blog-network
    restart: unless-stopped

  redis:
    image: redis:7
    container_name: blog-redis
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - blog-network
    restart: unless-stopped

  consul:
    image: consul:1.15
    container_name: blog-consul
    ports:
      - "8500:8500"
      - "8600:8600/tcp"
      - "8600:8600/udp"
    command: "consul agent -server -bootstrap-expect=1 -ui -bind=0.0.0.0 -client=0.0.0.0 -datacenter=dc1 -data-dir=/consul/data"
    environment:
      - CONSUL_BIND_INTERFACE=eth0
    volumes:
      - consul-data:/consul/data
    healthcheck:
      test: ["CMD", "consul", "members"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blog-network
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: blog-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
      - ZOOKEEPER_SERVER_ID=1
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blog-network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: blog-kafka
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS=0
      - KAFKA_LOG_RETENTION_MS=300000
      - KAFKA_LOG_SEGMENT_MS=60000
    volumes:
      - kafka-data:/var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:9092", "--list"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - blog-network
    restart: unless-stopped

  frontend:
    build: 
      context: ./Frontend
      dockerfile: Dockerfile.dev
    container_name: blog-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./Frontend:/app:delegated
      - /app/node_modules
      - /app/.next
      - /app/.pnpm-store
    depends_on:
      - api-gateway
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8080
      - CHOKIDAR_USEPOLLING=true
    restart: unless-stopped
    networks:
      - blog-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000"] 
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 30s

networks:
  blog-network:
    driver: bridge

volumes:
  zookeeper-data:
  zookeeper-log:
  kafka-data:
  consul-data:
